{"version":3,"sources":["Searchbar.js","Mymap.js","App.js","serviceWorker.js","index.js"],"names":["Searchbar","locationName","this","props","markers","forEach","marker","title","window","google","maps","event","trigger","query","searched","filteredPlaces","className","aria-label","role","tabIndex","type","placeholder","value","onChange","e","target","map","location","index","key","onClick","activation","name","Component","Mymap","state","locations","lat","lng","latlong","initMap","setState","Map","document","getElementById","center","zoom","infoWindow","InfoWindow","i","Marker","position","x","axios","get","then","response","locationInfo","data","venues","formattedAddress","push","addListener","setContent","open","catch","error","alert","filterLocations","setVisible","match","RegExp","escapeRegExp","filter","loc","test","searchedMarkers","url","getElementsByTagName","script","createElement","src","async","defer","parentNode","insertBefore","loadScript","gm_authFailure","bind","id","App","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","URL","process","href","origin","addEventListener","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dc2b965a.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Searchbar extends Component {\n\n  /** \n   * use foreach method to handle a click\n   * when the user press the marker that display\n   * and active loctions markers\n  */\n  activation (locationName) {\n    const { markers } = this.props\n    markers.forEach((marker) => {\n      if(marker.title === locationName) {\n        window.google.maps.event.trigger(marker, 'click')\n      }else {\n        window.google.maps.event.trigger(marker, '')\n      }\n    })\n}\n    render() {\n    const { query, searched, filteredPlaces } = this.props\n    return (\n        <div\n        className=\"sidemenu\"\n        aria-label='sidemenu'\n        role='menu'>\n        <div\n        className=\"search\"\n        aria-label='searchbox'\n        tabIndex='0'>\n          <input\n            type=\"text\"\n            placeholder=\"Looking for cafes\"\n            value={query}\n            onChange={(e) => searched(e.target.value)}\n          />\n        </div>\n        <div\n        className=\"ListView\"\n        aria-label='list of all cafes'>\n        <ul>\n          {filteredPlaces.map((location, index) => (\n            <li key={index}><button onClick={() => this.activation(location.name)} aria-label='cafe buttons'>{location.name}</button></li>\n          ))}\n        </ul>\n      </div>\n</div>\n  )\n    }\n}\n\nexport default Searchbar","import React, { Component } from 'react'\nimport escapeRegExp from 'escape-string-regexp'\nimport Searchbar from './Searchbar'\nimport axios from 'axios'\n\n\nclass Mymap extends Component {\n\n    state = {\n      query: '',\n      markers: [],\n      filteredPlaces: [],\n      locations: [\n        { name: \"Naguib Mahfouz Cafe\", location: { lat: 30.047963, lng: 31.261567 }, latlong: \"30.047963,31.261567\" },\n        { name: \"Room Art Space & Cafe\", location: { lat: 30.03543629889637, lng: 31.231414418746162 }, latlong: \"30.03543629889637,31.231414418746162\" },\n        { name: \"Bubblicious\", location: { lat: 30.065155534332987, lng: 31.217278507457564 }, latlong: \"30.065155534332987,31.217278507457564\" },\n        { name: \"Bab El Nil\", location: { lat: 30.07221713024017, lng: 31.227788629626797 }, latlong: \"30.07221713024017,31.227788629626797\" },\n        { name: \"La Madeleine at Sofitel Cairo El Gezirah\", location: { lat: 30.038783186860627, lng: 31.22447222471237 }, latlong: \"30.038783186860627,31.22447222471237\" },\n        { name: \"El Fishawi\", location: { lat: 30.0474, lng: 31.2623 }, latlong: \"30.0474,31.2623\" },\n        { name: \"Beanos\", location: { lat: 30.0485, lng: 31.2025 }, latlong: \"30.0485,31.2025\" },\n        { name: \"Grand Cafe\", location: { lat: 30.0428, lng: 31.1984 }, latlong: \"30.0428,31.1984\" },\n        { name: \"Pottery Cafe\", location: { lat: 30.0646, lng: 31.2157 }, latlong: \"30.0646,31.2157\" },\n         ]\n      }\n    \n      /**\n       * Render the map and dipslay alert if map failed to load\n       * using componentDidMount method\n       */\n      componentDidMount() {\n        // loadScript function that render the map\n        loadScript(\"https://maps.googleapis.com/maps/api/js?key=AIzaSyB2Uc0ijnu0YBte1XEnPcChy6CRn84VTNE&callback=initMap\")\n        window.initMap = this.initMap\n        // if map failed to load \n        //https://developers.google.com/maps/documentation/javascript/events\n        window.gm_authFailure = function() {\n            alert('Google maps failed to load!')\n          } \n      }\n     // function that initialize the map\n      initMap = () => {\n        //Decalare location and markers\n        const { locations, markers } = this.state\n        this.setState({ filteredPlaces: locations })\n        // get the the map id and assign to map variable\n        var map = new window.google.maps.Map(document.getElementById('map'), {\n          center: { \"lat\": 30.0444, \"lng\": 31.2357 },\n          zoom: 14\n        })\n          // ceate information window \n        var infoWindow = new window.google.maps.InfoWindow()\n        // loop throw each venue use foreach to display dynamic markers\n        this.state.locations.forEach((location, i) => {\n          //make new marker\n          var marker = new window.google.maps.Marker({\n            // display the locations\n            position: this.state.locations[i].location,\n            map: map,\n            title: this.state.locations[i].name\n          })\n          // fetch and store loctions\n        const x = this.state.locations[i].latlong\n          // fetch data use foursquare APLI 3rd party\n        axios.get(`https://api.foursquare.com/v2/venues/search?ll=${x}&limit=1&client_id=YKMMQBCQEIR5PSIEIADJMQY4PWZVJAA035MMNN0KQINCS13P&client_secret=2E5JADXJRUMOEQK2XBBCAZ3LYZSBJ2KFC1MW234KUJODTNU2&v=20180827`).then(response => {\n          //display important informations about every loctions\n        var locationInfo = `<div class=\"info-window\"><h3 class=\"info-window-heading\">${response.data.response.venues[0].name}<div class=\"info-window-content\"></h3><p>${response.data.response.venues[0].name}</p><p>${response.data.response.venues[0].location.formattedAddress}</p><p class=\"foursquare-attribution\">Fetched from Foursquare</p></div></div>`;\n        \n          // pushing markers using .push method\n        markers.push(marker);\n          // event listnener that handle click to open info from marker\n        marker.addListener('click', function () {\n              infoWindow.setContent(locationInfo)\n              // open info!\n              infoWindow.open(map, marker)\n            })\n            // thow error if foursquare failed to load\n          }).catch(error => {\n            alert('Foursquare is failed to load!')\n          })\n        })\n        }\n         // create function that handle filter the search results for list and markers\n        filterLocations = (query) => {\n          const { locations, markers } = this.state\n          this.setState({ query })\n          if (query) {\n            markers.forEach((marker) => {\n              marker.setVisible(false)\n            })\n            const match = new RegExp(escapeRegExp(query), 'i')\n            this.setState({\n              filteredPlaces: locations.filter((loc) => match.test(loc.name)),\n              searchedMarkers: markers.filter((marker) => match.test(marker.title))\n                .forEach((marker) => marker.setVisible(true))\n            })\n          } else {\n            if (markers) {\n                /**\n                 * use foreach method instead .mpa methom to avoid\n                 * warning: Expected to return a value in arrow\n                 * function array-callback-return\n                 */ \n              markers.forEach((marker) => {\n                marker.setVisible(true)\n              })\n            }\n            this.setState({ filteredPlaces: locations })\n          }\n      }\n      \n    \n    render() {\n        return(\n            <div className=\"map\">\n            <Searchbar\n            query={this.state.query}\n            searchedMarkers={this.state.searchedMarkers}\n            filteredPlaces={this.state.filteredPlaces}\n            markers={this.state.markers}\n            location={this.state.locations}\n            searched={this.filterLocations.bind(this)}\n            />\n            <div\n            id=\"map\"\n            aria-label=\"map\"\n            tabIndex=\"0\">\n            </div>\n            </div>\n        )\n    }\n}\n\n/**\n * loadScript function that create script tag use DOM \n * the tag holds google maps API src async defer \n */ \nfunction loadScript (url) {\n    var index  = window.document.getElementsByTagName(\"script\")[0]\n    var script = window.document.createElement(\"script\")\n    script.src = url\n    script.async = true\n    script.defer = true\n    index.parentNode.insertBefore(script, index)\n  }\n\nexport default Mymap\n","import React, { Component } from 'react';\nimport './App.css';\nimport Mymap from './Mymap'\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <main>\n        <Mymap/>\n      </main>\n    );\n  }\n}\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.register();\n"],"sourceRoot":""}